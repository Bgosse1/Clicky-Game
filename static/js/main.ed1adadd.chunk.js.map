{"version":3,"sources":["components/Navbar/index.js","components/Wrapper/index.js","components/Jumbotron/index.js","components/Figure/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","Nav","justify","defaultActiveKey","className","Item","Link","href","Navbar","Text","message","correctGusses","topScore","Wrapper","children","JumboTron","Jumbotron","Component","FigureImage","Figure","onClick","clickHandler","id","Image","width","height","alt","name","src","image","Footer","App","state","collections","event","_this","itemClicked","filter","item","clicked","map","setState","sort","b","Math","random","_this2","this","components_Navbar","components_Jumbotron","components_Wrapper","components_Figure","key","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed1adadd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nfunction NavBar(props) {\n    return (\n      <Nav justify defaultActiveKey=\"/\" className=\"nav-bar\">\n        <Nav.Item>\n          <Nav.Link href=\"/\" className=\"nav-link\">Clicky Game</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Navbar.Text>{props.message}</Navbar.Text>\n        </Nav.Item>\n        <Nav.Item>\n          <Navbar.Text>Score: {props.correctGusses} | Top Score: {props.topScore}</Navbar.Text>\n        </Nav.Item>\n      </Nav>\n    );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport { Jumbotron } from \"react-bootstrap\";\n\nclass JumboTron extends Component {\n  render() {\n    return (\n        <Jumbotron>\n        <h1>Clicky Game!</h1>\n        <p>\n            Click on an image to earn points, but don't click on any more than once!\n        </p>\n      </Jumbotron>\n    );\n  }\n}\n\nexport default JumboTron;","import React from \"react\";\nimport { Figure } from \"react-bootstrap\";\n\nfunction FigureImage(props) {\n  return (\n    <Figure onClick={() => props.clickHandler(props.id)}>\n        <Figure.Image\n          width={170}\n          height={170}\n          alt={props.name}\n          src={props.image}\n        />\n      </Figure>\n  );\n}\n\nexport default FigureImage;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n        <div className=\"bottom\">\n            Clicky Game\n        </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/Navbar/index\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Figure from \"./components/Figure\";\nimport collections from \"./collection.json\";\nimport Footer from \"./components/Footer\";\n\nlet topScore = 0;\nlet correctGusses = 0;\nlet message = \"\";\n\nclass App extends Component {\n  state = {\n    collections,\n    topScore: 0,\n    correctGusses: 0,\n    message: \"Click an image to begin!\",\n  };\n\n  clickHandler = event => {\n    const collections = this.state.collections;\n    const itemClicked = collections.filter(item => item.id === event);\n\n    if (itemClicked[0].clicked) {\n\n      correctGusses = 0;\n      message = \"You guessed incorrectly!\";\n      collections.map(item => (item.clicked = false));\n\n      this.setState({ message });\n      this.setState({ correctGusses });\n      this.setState({ collections });\n\n    } else {\n      itemClicked[0].clicked = true;\n      correctGusses++;\n      message = \"You guessed correctly!\";\n\n      if (correctGusses > topScore) {\n        topScore = correctGusses;\n        this.setState({ topScore });\n      }\n\n      collections.sort((a, b) => {\n        return Math.random() - 0.5;\n      });\n\n\n      this.setState({ collections });\n      this.setState({ correctGusses });\n      this.setState({ message });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar message={this.state.message} correctGusses={this.state.correctGusses} topScore={this.state.topScore}/>\n        <Jumbotron />\n        <Wrapper>\n          {this.state.collections.map(item => (\n            <Figure\n              key={item.id}\n              id={item.id}\n              image={item.image}\n              name={item.name}\n              clickHandler={this.clickHandler}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}